//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{self, Deserialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize)]
#[sea_orm(table_name = "TopicTag")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    pub name: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub slug: String,
}

use std::hash::Hash;

impl Hash for Model {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::question_topic_tag::Entity")]
    QuestionTopicTag,
}

impl Related<super::question_topic_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QuestionTopicTag.def()
    }
}

impl Related<super::question::Entity> for Entity {
    fn to() -> RelationDef {
        super::question_topic_tag::Relation::Question.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::question_topic_tag::Relation::TopicTag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
