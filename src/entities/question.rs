//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use super::custom_serde::int_from_bool;
use sea_orm::entity::prelude::*;
use serde::{self, Deserialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize)]
#[sea_orm(table_name = "Question")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(column_type = "Double", nullable)]
    pub ac_rate: Option<f64>,
    pub difficulty: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub freq_bar: Option<f64>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub frontend_question_id: String,
    #[serde(deserialize_with = "int_from_bool")]
    pub is_favor: Option<i32>,
    #[serde(deserialize_with = "int_from_bool")]
    pub paid_only: Option<i32>,
    pub status: Option<String>,
    pub title: Option<String>,
    pub title_slug: Option<String>,
    #[serde(deserialize_with = "int_from_bool")]
    pub has_solution: Option<i32>,
    #[serde(deserialize_with = "int_from_bool")]
    pub has_video_solution: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::topic_tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::question_topic_tag::Relation::TopicTag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::question_topic_tag::Relation::Question.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
